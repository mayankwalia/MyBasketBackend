openapi: 3.0.0
info:
  title: My Basket Application
  description: >
    <div>Intro - MyBasket flask restful API
    <h1>Use:</h1>
    <ol> 
      <li>CRUD on Users</li>
      <li>CRUD on Products</li>
      <li>CRUD on Categories</li>
      <li>CRUD on Manager Requests</li>
      <li>CRUD on Feedback</li>
      <li> Add Items to Cart and update quantity</li>
      <li>Place Orders</li>
      <li>Search a Product</li>
    </ol>
    </div>

    <h1> Users Table Schema </h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>username</td>
          <td>String</td>
          <td>Unique, Not Null</td>
        </tr>
        <tr>
          <td>password</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>email</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>delivery_details</td>
          <td>Text</td>
          <td></td>
        </tr>
        <tr>
          <td>created_at</td>
          <td>DateTime</td>
          <td>Default: datetime.utcnow, Not Null</td>
        </tr>
        <tr>
          <td>last_activity</td>
          <td>DateTime</td>
          <td>Default: datetime.utcnow, Not Null</td>
        </tr>
        <tr>
          <td>report_type</td>
          <td>Enum('HTML', 'PDF')</td>
          <td>Default: 'HTML', Not Null</td>
        </tr>
        <tr>
          <td>approved</td>
          <td>Boolean</td>
          <td>Default: False, Not Null</td>
        </tr>
        <tr>
          <td>active</td>
          <td>Boolean</td>
          <td>Default: True, Not Null</td>
        </tr>
        <tr>
          <td>role_id</td>
          <td>Integer</td>
          <td>Foreign Key: Role.id, Not Null, Default: 1</td>
        </tr>
        <tr>
          <td>image</td>
          <td>String</td>
          <td></td>
        </tr>
      </tbody>
    </table>

    <h1> Role Table Schema </h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>name</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
      </tbody>
    </table>
    <h1> Category Table Schema </h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>name</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>description</td>
          <td>Text</td>
          <td></td>
        </tr>
        <tr>
          <td>owner_id</td>
          <td>Integer</td>
          <td>Foreign Key: User.id, Not Null</td>
        </tr>
        <tr>
          <td>approved</td>
          <td>Boolean</td>
          <td>Default: False, Not Null</td>
        </tr>
      </tbody>
    </table>
    <h1> Category Table Schema </h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>name</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>description</td>
          <td>Text</td>
          <td></td>
        </tr>
        <tr>
          <td>owner_id</td>
          <td>Integer</td>
          <td>Foreign Key: User.id, Not Null</td>
        </tr>
        <tr>
          <td>approved</td>
          <td>Boolean</td>
          <td>Default: False, Not Null</td>
        </tr>
      </tbody>
    </table>
    <h1> Product Table Schema </h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>title</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>description</td>
          <td>Text</td>
          <td></td>
        </tr>
        <tr>
          <td>owner_id</td>
          <td>Integer</td>
          <td>Foreign Key: User.id, Not Null</td>
        </tr>
        <tr>
          <td>approved</td>
          <td>Boolean</td>
          <td>Default: False, Not Null</td>
        </tr>
        <tr>
          <td>visibility</td>
          <td>Boolean</td>
          <td>Default: False, Not Null</td>
        </tr>
        <tr>
          <td>discount</td>
          <td>Float</td>
          <td></td>
        </tr>
        <tr>
          <td>stock</td>
          <td>Intger</td>
          <td></td>
        </tr>
        <tr>
          <td>unit</td>
          <td>enum</td>
          <td></td>
        </tr>
      </tbody>
    </table>
    <h1>Cart Table Schema</h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>customer_id</td>
          <td>Integer</td>
          <td>Foreign Key: User.id, Not Null</td>
        </tr>
        <tr>
          <td>product_id</td>
          <td>Integer</td>
          <td>Foreign Key: Products.id, Not Null</td>
        </tr>
        <tr>
          <td>quantity</td>
          <td>Integer</td>
          <td>Not Null</td>
        </tr>
      </tbody>
    </table>

    <h1>Orders Table Schema</h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>customer_id</td>
          <td>Integer</td>
          <td>Foreign Key: User.id, Not Null</td>
        </tr>
        <tr>
          <td>status</td>
          <td>Enum('Transit', 'Delivered', 'Cancelled', 'Pending', 'Returned')</td>
          <td>Default: 'Transit', Not Null</td>
        </tr>
        <tr>
          <td>created_at</td>
          <td>DateTime</td>
          <td>Default: Current UTC Time, Not Null</td>
        </tr>
        <tr>
          <td>updated_at</td>
          <td>DateTime</td>
          <td>Default: Current UTC Time, Not Null</td>
        </tr>
      </tbody>
    </table>


    <h1>ItemsOrdered Table Schema</h1>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
      </thead>
      <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>order_id</td>
          <td>Integer</td>
          <td>Foreign Key: Orders.id, Not Null</td>
        </tr>
        <tr>
          <td>item_id</td>
          <td>Integer</td>
          <td>Foreign Key: Products.id, Not Null</td>
        </tr>
        <tr>
          <td>quantity</td>
          <td>Integer</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>price_per_quantity</td>
          <td>Float</td>
          <td>Not Null</td>
        </tr>
      </tbody>
    </table>

  version: 1.0.0
  contact:
    name: "MyBasket API"
servers:
  - url: http://127.0.0.1:5000
paths:
  /signup:
    description: Endpoint to register a new user.
    post:
      description: Operation to register a new user.
      tags:
        - "Auth"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: dummy
                  required: true
                password:
                  type: string
                  example: strongpassword
                  required: true
                email:
                  type: string
                  example: dummy@example.com
                  required: true
                customer:
                  type: boolean
                  example: true
                  required: false
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  access_token:
                    type: string
                    example: [generated-access-token]
                  user:
                    type: object
                    properties:
                      user_id:
                        type: integer
                        example: 1
                      username:
                        type: string
                        example: dummy
                      follower_count:
                        type: integer
                        example: 0
                      following_count:
                        type: integer
                        example: 0
                      post_count:
                        type: integer
                        example: 0
                      account_created:
                        type: string
                        example: Thu, 29 Dec 2022 14:27:45 -0000
        "400":
          description: Username already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username already in use

  /login:
    description: Endpoint to authenticate and log in a user.
    post:
      description: Operation to authenticate and log in a user.
      tags:
        - "Auth"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                  required: true
                password:
                  type: string
                  example: password
                  required: true
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: [generated-access-token]
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      username:
                        type: string
                        example: dummy
                      email:
                        type: integer
                        example: 0
                      approved:
                        type: boolean
                        example: 0
                      post_count:
                        type: integer
                        example: 0
                      account_created:
                        type: string
                        example: Thu, 29 Dec 2022 14:27:45 -0000
        "401":
          description: Invalid credentials or user is inactive
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials or user is inactive
  #  Pass Bearer <token>
  /users/{user_id}:
    get:
      description: |
        Retrieve information about all users.
      tags:
        - "Users"
      security:
        - jwt: []
      responses:
        "200":
          description: Successfully retrieved user information(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

    put:
      summary: Update User Password
      description: |
        Updates the password of the authenticated user.
      tags:
        - Users
      security:
        - jwt: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: "old_password123"
                new_password:
                  type: string
                  example: "new_password456"
      responses:
        '201':
          description: User updated successfully
          content:
            application/json:
              example:
                message: User updated successfully
                access_token: "new_access_token"
                user: { user_details }
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                message: Old password and new password are required
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                message: Permission denied
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                message: Old password is incorrect
  /user/{user_id}:
    get:
      tags:
        - Users
      summary: Get user details by user ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: The ID of the user to retrieve.
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Permission denied
          content:
            application/json:
              example:
                message: Permission denied
        '404':
          description: User not found
          content:
            application/json:
              example:
                message: User not found
      security:
        - jwt: []
  /categories:
    get:
      description: |
        Retrieve information about all categories or a specific category if `category_id` is provided.
      tags:
        - "Category"
      security:
        - jwt: []
      responses:
        "200":
          description: Successfully retrieved category information(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category information retrieved successfully
                  categories:
                    type: array
                    items:
                      $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found

    post:
      summary: Create a New Product
      description: |
        Creates a new product and associates it with the authenticated store owner.
      tags:
        - Category
      security:
        - jwt: []
        - owner: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Product Title"
                description:
                  type: string
                  example: "Product Description"
                price:
                  type: number
                  example: 29.99
                stock:
                  type: integer
                  example: 100
                category_id:
                  type: integer
                  example: 1
                image:
                  type: file
                manufacture_date:
                  type: string
                  format: date-time
                  example: "2023-01-01T00:00:00Z"
                expiry_date:
                  type: string
                  format: date-time
                  example: "2023-12-31T23:59:59Z"
                discount:
                  type: number
                  example: 10.0
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              example:
                id: 1
                title: "Product Title"
                description: "Product Description"
                price: 29.99
                unit: "kg"
                image: "product_image.jpg"
                category_id: 1
                initialStock: 100
                stock: 100
                manufacture_date: "2023-01-01T00:00:00Z"
                expiry_date: "2023-12-31T23:59:59Z"
                discount: 10.0
                approved: true
                store_owner_id: 1
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                message: "Invalid request data"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Authentication failed"
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                message: "Permission denied"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                message: "Error in creating product"
    put:
      description: |
        Update the information of a specific category.
      tags:
        - "Category"
      security:
        - jwt: []
      parameters:
        - in: path
          name: category_id
          schema:
            type: integer
          required: true
        - in: formData
          name: name
          type: string
          required: false
        - in: formData
          name: description
          type: string
          required: false
      responses:
        "200":
          description: Successfully updated category information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Category id is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category id is required
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category not found
  
 
  /feedback:

    post:
      summary: Submit Feedback
      description: |
        Submit feedback for a product as a logged-in customer.
      tags:
        - Feedback
      security:
        - jwt: []
        - customer: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  example: 1
                rating:
                  type: number
                  example: 4.5
                comment:
                  type: string
                  example: "Great product!"
      responses:
        '201':
          description: Feedback submitted successfully
          content:
            application/json:
              example:
                id: 1
                product_id: 1
                user_id: 123
                rating: 4.5
                comment: "Great product!"
                created_at: "2023-01-01T12:34:56Z"
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                message: "Invalid request data"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Authentication failed"
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                message: "Permission denied"
                
    delete:
      description: |
        Delete a specific feedback.
      tags:
        - "Feedback"
      security:
        - jwt: []
      parameters:
        - in: path
          name: feedback_id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Feedback deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Feedback deleted successfully
        "403":
          description: Permission denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Permission denied
        "404":
          description: Feedback not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Feedback not found

  /manager-requests:
    get:
      description: |
        Retrieve information about all manager requests or a specific request if `request_id` is provided.
      tags:
        - "Requests"
      security:
        - jwt: []
      parameters:
        - in: path
          name: request_id
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: Successfully retrieved manager request information(s)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Manager request information retrieved successfully
                  requests:
                    type: array
                    items:
                      $ref: "#/components/schemas/ManagerRequest"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Manager request not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Manager request not found
    post:
      summary: Create Manager Request
      description: |
        Create a manager request as a store manager.
      tags:
        - Manager Requests
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: "Hiring"
                title:
                  type: string
                  example: "New Staff Request"
                description:
                  type: string
                  example: "Request to hire additional staff members"
                relatedId:
                  type: string
                  example: "store123"
      responses:
        '201':
          description: Manager request created successfully
          content:
            application/json:
              example:
                id: 1
                user_id: 123
                type: "Hiring"
                title: "New Staff Request"
                description: "Request to hire additional staff members"
                relatedId: "store123"
                created_at: "2023-01-01T12:34:56Z"
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                message: "Invalid request data"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Authentication failed"
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                message: "Permission denied"

    put:
      summary: Update Manager Request
      description: |
        Update the details of a manager request as an admin.
      tags:
        - Manager Requests
      security:
        - jwt: []
        - admin: []
      parameters:
        - in: path
          name: request_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: "Leave"
                title:
                  type: string
                  example: "Vacation Request"
                description:
                  type: string
                  example: "Request for vacation leave"
                relatedId:
                  type: string
                  example: "employee456"
      responses:
        '201':
          description: Manager request updated successfully
          content:
            application/json:
              example:
                id: 1
                user_id: 123
                type: "Leave"
                title: "Vacation Request"
                description: "Request for vacation leave"
                relatedId: "employee456"
                created_at: "2023-01-01T12:34:56Z"
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                message: "Invalid request data"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Authentication failed"
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                message: "Permission denied"
        '404':
          description: Not Found
          content:
            application/json:
              example:
                message: "Manager request not found"

    delete:
      description: |
        Delete a specific manager request.
      tags:
        - "Requests"
      security:
        - jwt: []
      parameters:
        - in: path
          name: request_id
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Manager request deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        "403":
          description: Permission denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Permission denied
        "404":
          description: Manager request not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Manager request not found

  /products:
    get:
      summary: Get Products
      description: |
        Get a list of all products or a specific product by ID.
      tags:
        - Products
      security:
        - jwt: []
      parameters:
        - in: query
          name: product_id
          schema:
            type: integer
          description: ID of the specific product to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                message: "Product(s) retrieved successfully"
                data:
                  - id: 1
                    name: "Product A"
                    image_file: "product_a.jpg"
                    # Other product fields...
                  - id: 2
                    name: "Product B"
                    image_file: "product_b.jpg"
                    # Other product fields...
                  # Additional products...
        '404':
          description: Not Found
          content:
            application/json:
              example:
                message: "Product not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                message: "Authentication failed"
    post:
      description: |
        Create a new product.
      tags:
        - "Products"
      security:
        - jwt: []
      consumes:
        - application/x-www-form-urlencoded
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the product
                  example: "Product Title"
                description:
                  type: string
                  description: The description of the product
                  example: "Product Description"
                price:
                  type: number
                  description: The price of the product
                  example: 29.99
                stock:
                  type: integer
                  description: The stock quantity of the product
                  example: 100
                category_id:
                  type: integer
                  description: The ID of the product's category
                  example: 1
                unit:
                  type: string
                  description: The unit of measurement for the product
                  example: "kg"
          responses:
            "201":
              description: Product created successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Product"
            "401":
              description: Unauthorized
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
            "403":
              description: Permission denied
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Permission denied
            "400":
              description: Bad Request
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Bad Request
            "500":
              description: Internal Server Error
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Error in creating product
        put:
          description: |
            Edit a product.
          tags:
            - "Products"
          security:
            - jwt: []
          parameters:
            - in: header
              name: product_id
              type: integer
              required: true
            - in: formData
              name: title
              type: string
              required: false
            - in: formData
              name: description
              type: string
              required: false
            - in: formData
              name: price
              type: number
              required: false
            - in: formData
              name: stock
              type: integer
              required: false
            - in: formData
              name: category_id
              type: integer
              required: false
            - in: formData
              name: unit
              type: integer
              required: false
          responses:
            "201":
              description: Product updated successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Product"
            "401":
              description: Unauthorized
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
            "403":
              description: Permission denied
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Permission denied
            "404":
              description: Product Not Found
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Product Not Found
            "400":
              description: Bad Request
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Bad Request
        delete:
          summary: Delete a product
          description: |
            Delete a product by its ID. Requires JWT authentication and ownership of the product.
          tags:
            - "Products"
    
          parameters:
            - in: path
              name: product_id
              required: true
              description: The ID of the product to be deleted
              schema:
                type: integer
    
          security:
            - jwt: []
    
          responses:
            "200":
              description: Product deleted successfully
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Product deleted successfully
    
            "400":
              description: Bad Request
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Product id is required
    
            "403":
              description: Permission Denied
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Permission denied
    
            "404":
              description: Product Not Found
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Product not found
      /update-report-preference:
        post:
          summary: Update Report Preference
          description: Endpoint to update the report preference for the authenticated customer.
          tags:
            - Customer
          security:
            - jwt: []
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    reportType:
                      type: string
                      enum: ["HTML", "PDF"]
                      description: The preferred report type.
                  required:
                    - reportType
          responses:
            "200":
              description: Report preference updated successfully.
              content:
                application/json:
                  example:
                    message: Report preference updated successfully
            "400":
              description: Invalid preference.
              content:
                application/json:
                  example:
                    message: Invalid preference
      
      /products/search:
        get:
          summary: Search products based on criteria
          tags:
            - Products
          parameters:
            - name: type
              in: query
              schema:
                type: string
              description: Type of search (latest, trending, popular, few, out_of_stock, all).
            - name: query
              in: query
              schema:
                type: string
              description: Search term.
            - name: category_id
              in: query
              schema:
                type: integer
              description: Category ID for filtering.
            - name: limit
              in: query
              schema:
                type: integer
              description: Maximum number of products to retrieve.
            - name: sort_by
              in: query
              schema:
                type: string
              description: Field to sort by (manufacture_date, expiry_date, price, average_rating, title).
            - name: sort_direction
              in: query
              schema:
                type: string
              description: Sort direction (asc or desc).
          responses:
            '200':
              description: Products retrieved successfully
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
            '404':
              description: No products found
              content:
                application/json:
                  example:
                    message: No products found
          security:
            - jwt: []
            
      /products/{product_id}/reviews:
        get:
          summary: Get Product Reviews
          description: Retrieve reviews for a specific product.
          tags:
            - Products
          security:
            - jwt: []
          parameters:
            - in: path
              name: product_id
              required: true
              schema:
                type: integer
              description: The ID of the product for which to retrieve reviews.
          responses:
            "200":
              description: Reviews successfully retrieved.
              content:
                application/json:
                  example:
                    reviews:
                      - id: 1
                        user:
                          id: 1
                          username: "user1"
                          email: "user1@example.com"
                        product_id: 1
                        review: "Great product!"
                        rating: 4.5
                        created_at: "2023-01-01T12:00:00Z"
                        updated_at: "2023-01-02T10:30:00Z"
                      - id: 2
                        # Add other review fields
            "404":
              description: No review found for this product.
              content:
                application/json:
                  example:
                    message: No review found for this product
    
      /categories/{category_id}/products:
        get:
          summary: Get Products by Category
          description: Retrieve products for a specific category.
          tags:
            - Categories
          security:
            - jwt: []
          parameters:
            - in: path
              name: category_id
              required: true
              schema:
                type: integer
              description: The ID of the category for which to retrieve products.
          responses:
            "200":
              description: Products successfully retrieved.
              content:
                application/json:
                  example:
                    products:
                      - id: 1
                        title: "Product 1"
                        description: "Description of Product 1"
                        price: 19.99
                        image_file: "base64-encoded-image-data"
                        # Add other product fields
                      - id: 2
                        title: "Product 2"
                        description: "Description of Product 2"
                        price: 29.99
                        image_file: "base64-encoded-image-data"
                        # Add other product fields
            "404":
              description: No products found for this category.
              content:
                application/json:
                  example:
                    message: No products found for this category
      /add_to_cart/{product_id}/quantity/{quantity}:
        post:
          summary: Add Product to Cart
          description: Add a specific quantity of a product to the customer's cart.
          tags:
            - Cart
          security:
            - jwt: []
          parameters:
            - in: path
              name: product_id
              required: true
              schema:
                type: integer
              description: The ID of the product to add to the cart.
            - in: path
              name: quantity
              required: true
              schema:
                type: integer
              description: The quantity of the product to add to the cart. Defaults to 1 if not provided.
          responses:
            "200":
              description: Product added to the cart successfully.
              content:
                application/json:
                  example:
                    message: Product added to cart successfully
            "400":
              description: Product already in the cart, try updating the quantity.
              content:
                application/json:
                  example:
                    message: Product already in cart, try updating the quantity
            "404":
              description: Product not found.
              content:
                application/json:
                  example:
                    message: Product not found
    
      /update_product_quantity/{product_id}/quantity/{quantity}:
        post:
          summary: Update Product Quantity in Cart
          description: Update the quantity of a product in the customer's cart.
          tags:
            - Cart
          security:
            - jwt: []
          parameters:
            - in: path
              name: product_id
              required: true
              schema:
                type: integer
              description: The ID of the product in the cart to update.
            - in: path
              name: quantity
              required: true
              schema:
                type: integer
              description: The new quantity of the product in the cart.
          responses:
            "200":
              description: Product quantity updated successfully.
              content:
                application/json:
                  example:
                    message: Product quantity updated successfully
            "404":
              description: Product not found in the cart.
              content:
                application/json:
                  example:
                    message: Product not found in cart
    
      /remove_from_cart/{product_id}:
        post:
          summary: Remove Product from Cart
          description: Remove a product from the customer's cart.
          tags:
            - Cart
          security:
            - jwt: []
          parameters:
            - in: path
              name: product_id
              required: true
              schema:
                type: integer
              description: The ID of the product to remove from the cart.
          responses:
            "200":
              description: Product removed from cart successfully.
              content:
                application/json:
                  example:
                    message: Product removed from cart successfully
            "404":
              description: Product not found in the cart.
              content:
                application/json:
                  example:
                    message: Product not found in cart
    
      /update-discount/{productId}:
        post:
          summary: Update Product Discount
          description: Update the discount percentage for a product.
          tags:
            - Products
          security:
            - jwt: []
          parameters:
            - in: path
              name: productId
              required: true
              schema:
                type: integer
              description: The ID of the product to update.
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    discount:
                      type: number
                      minimum: 0
                      maximum: 100
                      description: The new discount percentage.
                  required:
                    - discount
          responses:
            "200":
              description: Discount updated successfully.
              content:
                application/json:
                  example:
                    message: Discount updated successfully
            "404":
              description: Product not found.
              content:
                application/json:
                  example:
                    message: Product not found
    
      /my-cart:
        get:
          summary: Get Cart Contents (Customer)
          description: Retrieve the contents of the customer's cart.
          tags:
            - Cart
          security:
            - jwt: []
          responses:
            "200":
              description: Cart contents retrieved successfully.
              content:
                application/json:
                  example:
                    - id: 1
                      user_id: 1
                      quantity: 2
                      product:
                        id: 1
                        title: "Product 1"
                        description: "Description of Product 1"
                        price: 19.99
                        # Add other product fields
                    - id: 2
                      # Add other cart item fields
      /track-orders/{user_id}:
        get:
          summary: Track Orders (For Customer)
          description: Retrieve orders for a specific customer.
          tags:
            - Orders
          security:
            - jwt: []
          parameters:
            - in: path
              name: user_id
              required: true
              schema:
                type: integer
              description: The ID of the customer to track orders.
          responses:
            "200":
              description: Orders successfully retrieved.
              content:
                application/json:
                  example:
                    - id: 1
                      customer_id: 1
                      status: "Shipped"
            "403":
              description: Permission denied.
              content:
                application/json:
                  example:
                    message: Permission denied
    
      /place-order:
        post:
          summary: Place Order
          description: Place an order for the items in the customer's cart.
          tags:
            - Orders
          security:
            - jwt: []
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    addressDetails:
                      type: string
                      description: Delivery address details.
                  required:
                    - addressDetails
          responses:
            "201":
              description: Order placed successfully.
              content:
                application/json:
                  example:
                    message: Order placed successfully
            "400":
              description: No items in the cart.
              content:
                application/json:
                  example:
                    message: No items in cart
    
      /manager/orders:
        get:
          summary: Placed Orders (For Manager and Admin)
          description: Retrieve placed orders and summary for store managers.
          tags:
            - Orders
          security:
            - jwt: []
          responses:
            "200":
              description: Orders and summary successfully retrieved.
              content:
                application/json:
                  schema:
                    orders:
                      type: array
                      $ref: "#/components/schemas/Order"
                    totalSales: 159.95
                    totalQuantitiesSold: 8
            "403":
              description: Permission denied.
              content:
                application/json:
                  example:
                    message: Permission denied
    
      /update-order-status/{order_id}:
        put:
          summary: Update Order Status
          description: Update the status of a specific order.
          tags:
            - Orders
          security:
            - jwt: []
          parameters:
            - in: path
              name: order_id
              required: true
              schema:
                type: integer
              description: The ID of the order to update.
            - in: query
              name: status
              schema:
                type: string
              description: New status for the order
          responses:
            "200":
              description: Order status updated successfully.
              content:
                application/json:
                  example:
                    message: Order status updated successfully
            "400":
              description: Invalid status provided.
              content:
                application/json:
                  example:
                    message: Invalid status
            "403":
              description: Permission denied.
              content:
                application/json:
                  example:
                    message: Permission denied
            "404":
              description: Order not found.
              content:
                application/json:
                  example:
                    message: Order not found
    
      /product/update-visibility/{product_id}:
        post:
          summary: Update Product Visibility
          description: Update the visibility of a specific product.
          tags:
            - Products
          security:
            - jwt: []
          parameters:
            - in: path
              name: product_id
              required: true
              schema:
                type: integer
              description: The ID of the product to update.
          responses:
            "200":
              description: Product visibility updated successfully.
              content:
                application/json:
                  example:
                    message: Product visibility updated successfully
            "404":
              description: Product not found.
              content:
                application/json:
                  example:
                    message: Product not found
    
      /summary/items-sold:
        get:
          summary: Items Sold Summary (Manager Dashboard)
          description: Retrieve a summary of items sold for the past 7 days.
          tags:
            - Summary Data
          security:
            - jwt: []
          responses:
            "200":
              description: Items sold summary successfully retrieved.
              content:
                application/json:
                  example:
                    "2023-11-23":
                      "Product 1": 10
                      "Product 2": 5
                      "total": 15
            "403":
              description: Permission denied.
              content:
                application/json:
                  example:
                    message: Permission denied
    
      /summary/sales:
        get:
          summary: Sales Summary (Admin & Manager Dashboard)
          description: >
            Retrieve sales summary for administrators and store owners.
            Provide optional starting_date and ending_date parameters.
          tags:
            - Summary Data
          security:
            - jwt: []
          parameters:
            - in: query
              name: starting_date
              schema:
                type: string
                format: date-time
                example: 2023-11-09T00:00:00.000Z
            #           description: The starting date for the sales summary (default: 7 days ago).
            - in: query
              name: ending_date
              schema:
                type: string
                format: date-time
                example: 2023-11-24T00:00:00.000Z
          #           description: The ending date for the sales summary (default: current date).
          responses:
            "200":
              description: Sales summary successfully retrieved.
              content:
                application/json:
                  example:
                    "Product 1": 5
                    "Product 2": 3
            "403":
              description: Permission denied.
              content:
                application/json:
                  example:
                    message: Permission denied
    
      /summary/orders-placed:
        get:
          summary: Orders Placed Summary (Admin Dashboard)
          description: Retrieve a summary of orders placed for the past 7 days.
          tags:
            - Summary Data
          security:
            - jwt: []
          responses:
            "200":
              description: Orders placed summary successfully retrieved.
              content:
                application/json:
                  example:
                    orders:
                      "2023-11-23": 5
                      "2023-11-22": 10
                      # Add other dates
                    status:
                      Transit: 2
                      Delivered: 15
                      Cancelled: 3
                      Pending: 5
                      Returned: 1
                    totalSales: 1000.0
                    totalQuantitiesSold: 30
            "403":
              description: Permission denied.
              content:
                application/json:
                  example:
                    message: Permission denied
    
      /summary/categories:
        get:
          summary: Category Products Summary (Admin Dashboard)
          description: >
            Retrieve a summary of products per category for the past 7 days.
            Provide optional starting_date and ending_date parameters.
          tags:
            - Summary Data
          security:
            - jwt: []
          parameters:
            - in: query
              name: starting_date
              schema:
                type: string
                format: date-time
            #           description: The starting date for the summary (default: 7 days ago).
            - in: query
              name: ending_date
              schema:
                type: string
                format: date-time
          #           description: The ending date for the summary (default: current date).
          responses:
            "200":
              description: Category products summary successfully retrieved.
              content:
                application/json:
                  example:
                    "Category 1": 10
                    "Category 2": 5
            "403":
              description: Permission denied.
              content:
                application/json:
                  example:
                    message: Permission denied
    
      /test:
        get:
          description: |
            Retrieve a test message.
          tags:
            - "Auth"
          responses:
            "200":
              description: Successfully retrieved test message
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/TestAPIResponse"
    
      /components/schemas/TestAPIResponse:
        type: object
        properties:
          message:
            type: string
            example: Hello
components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
  schemas:
     Cart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 123
        quantity:
          type: integer
          example: 2
        product:
          $ref: '#/components/schemas/Product'
     Feedback:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: '#/components/schemas/User'
        product_id:
          type: integer
          example: 123
        review:
          type: string
          example: This product is great!
        rating:
          type: number
          format: float
          example: 4.5
        created_at:
          type: string
          format: date-time
          example: '2022-12-29T14:27:45Z'
        updated_at:
          type: string
          format: date-time
          example: '2022-12-30T10:30:15Z'
     Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        customer_id:
          type: integer
          example: 123
        status:
          type: string
          example: pending
        created_at:
          type: string
          format: date-time
          example: '2022-12-29T14:27:45Z'
        updated_at:
          type: string
          format: date-time
          example: '2022-12-30T10:30:15Z'
        customer:
          $ref: '#/components/schemas/User'
        items_ordered:
          type: array
          items:
            $ref: '#/components/schemas/ItemsOrdered'
     ItemsOrdered:
      type: object
      properties:
        id:
          type: integer
          example: 1
        item:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
        price_per_quantity:
          type: number
          format: float
          example: 39.98
        order:
          $ref: '#/components/schemas/Order'
     Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Product Name
        description:
          type: string
          example: Product description goes here.
        price:
          type: number
          format: float
          example: 19.99
        image:
          type: string
          example: product_image.jpg
        store_owner_id:
          type: integer
          example: 123
        category_id:
          type: integer
          example: 456
        visibility:
          type: boolean
          example: true
        discount:
          type: number
          format: float
          example: 0.1
        initialStock:
          type: integer
          example: 100
        stock:
          type: integer
          example: 80
        unit:
          type: string
          example: pieces
        manufacture_date:
          type: string
          format: date-time
          example: '2022-12-29T14:27:45Z'
        expiry_date:
          type: string
          format: date-time
          example: '2023-12-29T14:27:45Z'
        image_file:
          type: string
          example: [image-url]
        average_rating:
          type: number
          format: float
          example: 4.5
        store_owner:
          $ref: '#/components/schemas/User'
          
     User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: dummy
        email:
          type: string
          example: dummy@yopmail.com
        created_at:
          type: string
          format: date-time
          example: '2022-12-29T14:27:45Z'
        approved:
          type: boolean
          example: true
        active:
          type: boolean
          example: true
        role_id:
          type: integer
          example: 2
        report_type:
          type: string
          example: general
        following_count:
          type: integer
          example: 0
        post_count:
          type: integer
          example: 0
        account_created:
          type: string
          example: Thu, 29 Dec 2022 14:27:45 -0000
        image_file:
          type: string
          example: [image-url]
     ManagerRequest:
      type: object
      properties:
        id:
          type: integer
          example: 1
        type:
          type: string
          example: Edit Category
        title:
          type: string
          example: Category 1
        description:
          type: string
          example: Some description
        relatedId:
          type: integer
          example: 123
        user:
          $ref: '#/components/schemas/User'
     Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Electronics
        description:
          type: string
          example: Electronic products category
        owner:
          $ref: '#/components/schemas/User'
        approved:
          type: boolean
          example: true